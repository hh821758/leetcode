LC 673 Number of Longest Increasing Subsequence

Facebook

Medium

利用了dp的思路，防止重复计算

class Solution {
    public int findNumberOfLIS(int[] nums) {
        if(nums.length==0) return 0;
        int max_len = 1;
        int result = 1;
        // subsequence包含i点时的最大length
        // subsequence包含i点时能构成的最大length的subsequence的个数
        int[] len = new int[nums.length];
        int[] count = new int[nums.length];
        Arrays.fill(len, 1);
        Arrays.fill(count,1);
        for(int i=1;i<nums.length;i++){
            int n = nums[i];
            for(int j=0;j<i;j++){
                int n2 = nums[j];
                if(n>n2){
                    int l = len[j]+1;
                    if(l>len[i]){
                        len[i] = l;
                        count[i] = count[j];
                    }else if(l==len[i]){
                        count[i]+= count[j];
                    }
                }
            }
            if(len[i] == max_len){
                result+=count[i];
            }else if(len[i]>max_len){
                max_len = len[i];
                result = count[i];
            }
        }
        return result;
    }
}