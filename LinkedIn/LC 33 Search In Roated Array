LC 33 Search In Roated Array

LinkedIn

Medium

两种思路，第一种是合在一起进行判断
第二种是在一个while loop中先找到rotation的位置，然后在第二个while loop中，根据offest可以判断每次观察的数在标准的sorted array中应该是在什么位置。

第一个方法就是要分条件阐明。 第一个方法分条件还有不同的分法。

下面是我自己写的第一个方法的一种，先判断了中值和target的关系，然后判断不同区间下如何处理。

class Solution {
    public int search(int[] nums, int target) {
        if(nums.length==0) return -1;
        int l = 0;
        int h = nums.length-1;
        while(l<h){
            int mid = (h-l)/2+l;
            if(nums[mid] == target){
                return mid;
            }else if(nums[mid] > target){
                if(nums[0]>target && nums[mid]>=nums[0]){
                    l=mid+1;
                }else{
                    h=mid-1;
                }
            }else{
                if(nums[nums.length-1]<target && nums[mid]<=nums[nums.length-1]){
                    h=mid-1;
                }else{
                    l=mid+1;
                }
            }
        }
        return (nums[l]==target)?l:-1;
    }
}

比较喜欢第一个方法的第二个种变体：
思路是判断mid和low之间
public class Solution {
public int search(int[] A, int target) {
    int lo = 0;
    int hi = A.length - 1;
    while (lo < hi) {
        int mid = (lo + hi) / 2;
        if (A[mid] == target) return mid;
        
        if (A[lo] <= A[mid]) {
            if (target >= A[lo] && target < A[mid]) {
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        } else {
            if (target > A[mid] && target <= A[hi]) {
                lo = mid + 1;
            } else {
                hi = mid - 1;
            }
        }
    }
    return A[lo] == target ? lo : -1;
}
同理可以判断mid和high之间：
class Solution {
    public int search(int[] A, int target) {
        if(A.length==0) return-1;
        int lo = 0;
        int hi = A.length - 1;
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            if (A[mid] == target) return mid;

            if (A[mid] <= A[hi]) {
                if (target > A[mid] && target <= A[hi]) {
                    lo = mid + 1;
                } else {
                    hi = mid-1;
                }
            } else {
                if (target < A[mid] && target >= A[lo]) {
                    hi = mid - 1;
                } else {
                    lo = mid + 1;
                }
            }
        }
        return A[lo] == target ? lo : -1;
    }
}

第二种方法：
int search(int A[], int n, int target) {
        int lo=0,hi=n-1;
        // find the index of the smallest value using binary search.
        // Loop will terminate since mid < hi, and lo or hi will shrink by at least 1.
        // Proof by contradiction that mid < hi: if mid==hi, then lo==hi and loop would have been terminated.
        while(lo<hi){
            int mid=(lo+hi)/2;
            if(A[mid]>A[hi]) lo=mid+1;
            else hi=mid;
        }
        // lo==hi is the index of the smallest value and also the number of places rotated.
        int rot=lo;
        lo=0;hi=n-1;
        // The usual binary search and accounting for rotation.
        while(lo<=hi){
            int mid=(lo+hi)/2;
            int realmid=(mid+rot)%n;
            if(A[realmid]==target)return realmid;
            if(A[realmid]<target)lo=mid+1;
            else hi=mid-1;
        }
        return -1;
    }