LC 353 Design Snake Game

Google

Medium

一开始的时候用的char[][] board或者int[][] board，结果memory超了，改成用hashset记录蛇当前的身体占有点。 注意蛇头咬蛇尾的情况不算collision。

class SnakeGame {

    /** Initialize your data structure here.
        @param width - screen width
        @param height - screen height 
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */
    public SnakeGame(int width, int height, int[][] food) {
        h = height;
        w = width;
        
        x=0;
        y=0;
        snake = new LinkedList<int[]>();
        snake.offer(new int[]{x,y});
        set = new HashSet<Integer>();
        set.add(0);
        f=0;
        this.food = food;
    }
    
    int[][] food;
    int x;
    int y;
    int f;
    int h;
    int w;
    LinkedList<int[]> snake;
    HashSet<Integer> set;
    
    
    /** Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body. */
    public int move(String direction) {
        if(direction.equals("U")){
            x-=1;
        }else if(direction.equals("L")){
            y-=1;
        }else if(direction.equals("D")){
            x+=1;
        }else if(direction.equals("R")){
            y+=1;
        }
        if(x<0 || y<0 || x>h-1 || y>w-1|| (set.contains(x*w+y) && (snake.peek()[0]!=x || snake.peek()[1]!=y))) return -1;
        snake.offer(new int[]{x,y});
        if(f<food.length && x==food[f][0] && y==food[f][1]){
            f++;
        }else{
            int[] tail = snake.poll();
            set.remove(tail[0]*w+tail[1]);
        }
        set.add(x*w+y);
        return snake.size()-1;
    }
}

/**
 * Your SnakeGame object will be instantiated and called as such:
 * SnakeGame obj = new SnakeGame(width, height, food);
 * int param_1 = obj.move(direction);
 */