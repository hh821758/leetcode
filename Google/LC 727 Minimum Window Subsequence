LC 727 Minimum Window Subsequence

Google

Hard

比较有挑战性的DP题，不容易想到用dp来记录起始index。而且dp预设值的处理也很巧妙。

class Solution {
    public String minWindow(String S, String T) {
        int m = S.length(); int n = T.length();
        int[][] dp= new int[m+1][n+1];
        for(int i=0;i<=m;i++){
        		// 在这里给出的当T不取任何字母时，match的起始index为当前index的下一个。
        		// 这样在下面的dp求解过程中，j=0时，dp[i-1][j-1]的值就变成了i，正好是指从当前点开始。
                dp[i][0] = i+1;
        }
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                dp[i][j] = (S.charAt(i-1) == T.charAt(j-1))?dp[i-1][j-1]:dp[i-1][j];
            }
        }
        
        int min = m+1;
        int left = -1;
        int right = -1;
        for(int i=1;i<=m;i++){
            if(dp[i][n]!=0){
                int len = i-dp[i][n]+1;
                if(len<min){
                    min = len;
                    left = dp[i][n]-1;
                    right = i-1;
                }
            }
        }
        return (left==-1)?"":S.substring(left, right+1);
    }
}