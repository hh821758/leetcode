LC 212 Word Search II

Google

Hard

非常综合的题目，有很多巧妙的小方法来减少运行时间：

TrieNode is all we need. search and startsWith are useless.
1. No need to store character at TrieNode. c.next[i] != null is enough. （因为根据第4条，存word就可以，不用每次都知道TrieNode上的char是什么）
2. Never use c1 + c2 + c3. Use StringBuilder. （如果一定要一个char一个char的加起来，也要用stringbuilder）
3. No need to use O(n^2) extra space visited[m][n]. （visited[][] 可以省略掉，每次recursion的时候把grid[][]标注成其他字符，最后再变回来就好）
4. No need to use StringBuilder. Storing word itself at leaf node is enough. （省掉了一个个处理char）
5. No need to use HashSet to de-duplicate. Use “one time search” trie. （巧妙的办法，把访问过的word从Trie中去掉，就不会再重复访问了）

public List<String> findWords(char[][] board, String[] words) {
    List<String> res = new ArrayList<>();
    TrieNode root = buildTrie(words);
    for (int i = 0; i < board.length; i++) {
        for (int j = 0; j < board[0].length; j++) {
            dfs (board, i, j, root, res);
        }
    }
    return res;
}

public void dfs(char[][] board, int i, int j, TrieNode p, List<String> res) {
    char c = board[i][j];
    if (c == '#' || p.next[c - 'a'] == null) return;
    p = p.next[c - 'a'];
    if (p.word != null) {   // found one
        res.add(p.word);
        p.word = null;     // de-duplicate
    }

    board[i][j] = '#';
    if (i > 0) dfs(board, i - 1, j ,p, res); 
    if (j > 0) dfs(board, i, j - 1, p, res);
    if (i < board.length - 1) dfs(board, i + 1, j, p, res); 
    if (j < board[0].length - 1) dfs(board, i, j + 1, p, res); 
    board[i][j] = c;
}

public TrieNode buildTrie(String[] words) {
    TrieNode root = new TrieNode();
    for (String w : words) {
        TrieNode p = root;
        for (char c : w.toCharArray()) {
            int i = c - 'a';
            if (p.next[i] == null) p.next[i] = new TrieNode();
            p = p.next[i];
       }
       p.word = w;
    }
    return root;
}

class TrieNode {
    TrieNode[] next = new TrieNode[26];
    String word;
}